name: Deploy Code to EC2 Server

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@master

    - name: Login to Docker Hub
      run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

    - name: Build and push Docker image
      run: |
        docker buildx create --use
        docker buildx inspect --bootstrap
        docker buildx build --load -t my-application:latest .
        docker tag my-application:latest ${{ secrets.DOCKERHUB_USERNAME }}/my-application:latest
        echo $(docker images)
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-application:latest

    - name: Logout from Docker Hub
      run: docker logout

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            existing_container=$(docker ps -q -f name=my-application)
            if [ ! -z "$existing_container" ]; then
                echo "Stopping and removing existing container..."
                docker stop $existing_container
                docker rm $existing_container
            fi
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/my-application:latest
            docker run -d -p 80:80 --name my-application ${{ secrets.DOCKERHUB_USERNAME }}/my-application:latest
            docker image prune -f